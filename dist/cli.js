#!/usr/bin/env node
import s from"./lib.js";const e=process.argv,l=e.indexOf("--hex"),p=e.indexOf("--base64"),f=e.indexOf("--nwkkey"),c=e.indexOf("--appkey"),g=e.indexOf("--cntmsb");function u(){console.log("Usage:"),console.log("	lora-packet-decode [--nwkkey <NwkSKey> --appkey <AppSKey> --cntmsb <fCntMSB>] --{hex|base64} <data>"),process.exit(1)}(f>=0&&!(c>=0)||!(f>=0)&&c>=0)&&u();let d;if(l!=-1&&l+1<e.length){const n=e[l+1];console.log("decoding from Hex: ",n),d=Buffer.from(n,"hex")}else if(p!=-1&&p+1<e.length){const n=e[p+1];console.log("decoding from Base64: ",n),d=Buffer.from(n,"base64")}else u();const i=s.fromWire(d);console.log("Decoded packet"),console.log("--------------");let r=i.toString();if(f>=0&&c>=0){const n=g>=0?[parseInt(e[g+1])&255,parseInt(e[g+1])&65280]:null;let t;n&&(t=Buffer.from(n));const o=Buffer.from(e[f+1],"hex"),a=Buffer.from(e[c+1],"hex"),B=s.verifyMIC(i,o,a,t)?" (OK)":" (BAD != "+m(s.calculateMIC(i,o,a,t))+")",x=m(s.decrypt(i,a,o,t));r=r.replace(/  MIC = [0-9a-fA-F]+/,"$&"+B),r=r.replace(/  FRMPayload = [0-9a-fA-F]+/,`$&
             Plaintext = `+x+" ('"+k(x)+"')")}console.log(r);function m(n){return n.toString("hex").toUpperCase()}function k(n){return n.replace(/../g,function(t){const o=parseInt(t,16);return o>=32&&o<127?String.fromCharCode(o):"."})}
